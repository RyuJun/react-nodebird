{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.459fe0aa753bc220c960.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import React, { useEffect } from \"react\";\r\nimport PostForm from '../components/PostForm';\r\nimport PostCard from '../components/PostCard';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\n// react-redux 7.1 버전 이상은 Hooks에서 redux를 사용 할 수 있도록 지원한다.\r\n// useSelector -> Hooks에서 redux state를 가져다 쓸 수 있도록 지원 ( 기존 Hooks에서의 const [a, setA ] = useState('')  a 생각  )\r\n// useDispatch -> Hooks에서 action을 dispatch 할 수 있도록 지원 ( 기존 Hooks에서의 const [a, setA ] = useState('')  setA 생각 )\r\n\r\n// react-redux connect\r\n// 기존 클래스 컴포넌트 일때는 connect 컴포넌트를 자주 사용했다.\r\n// 하이오더 함수를 사용하여 mapStateToProps, mapDispatchToProps 함수를 따로 제작하여 component의 props로 dispatch와 현재 state를 받아온다.\r\n// react-redux의 connect 함수를 사용한 방식 (기존 클래스컴포넌트나 react-redux 7.1버전 이전에서 많이 사용)\r\n// react-redux의 useSelector, useDispatch 함수를 사용한 방식 (Hooks 컴포넌트 react-redux 7.1버전 이상에서 새로 사용 갠취)\r\n\r\n\r\nconst Home = () => {\r\n  // Hooks에서는 성능이슈 때문에 useSelector함수를 잘게 잘게 쪼갠다.\r\n  // 이유는 useSelector로 가져온 값이 변경되었을때 리랜더링이 일어나기 때문,\r\n  // 구조 분해를 통해 한방에 가져와도 상관은 없다만 성능 이슈를 위하여\r\n  // 최대한 잘게 작게 쪼개서 useSelector를 여러번 호출하면 쓸데없는 리랜더링을 줄일 수 있다.\r\n  const { me } = useSelector(state => state.user);\r\n  const { mainPosts } = useSelector(state => state.post);\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n  }, []);\r\n  // useEffect의 두번째 인자에 아무것도 넣지 않으면 componentDidMount와 동일,\r\n  // componentDidMount는 컴포넌트가 첫 랜더링 후 실행됨\r\n  return (\r\n    <>\r\n      <div>\r\n        {me && <PostForm />}\r\n        {mainPosts.map((c) => {\r\n          return (\r\n            <PostCard key={c} post={c} />\r\n          );\r\n        })}\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Home;\r\n"],"mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAKA;AAAA;AALA;AACA;AADA;AAMA;AAAA;AANA;AACA;AAMA;AACA;AAGA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAIA;AACA;AACA;;;;A","sourceRoot":""}