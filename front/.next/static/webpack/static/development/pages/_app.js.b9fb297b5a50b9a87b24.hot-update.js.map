{"version":3,"file":"static/webpack/static\\development\\pages\\_app.js.b9fb297b5a50b9a87b24.hot-update.js","sources":["webpack:///./sagas/user.js"],"sourcesContent":["import { all, fork, takeLatest, call, put, take } from 'redux-saga/effects';\r\nimport { LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_IN } from '../reducers/user';\r\n\r\n// all  -> redux-saga에서 eventListener와 비슷하게 while(true)를통해  실행대기 함수등록을 하였다면, 모두 묶어줄 때 사용한다.\r\n// take -> redux-saga에서 generator.next()와 마찬가지로 yield 로인해 중단된 함수를 다시 재개시킨다.\r\n// put  -> redux-saga에서의 dispatch라 생각하면 된다.\r\n\r\nfunction* loginAPI() {\r\n  // 서버에 요청을 보내는 부분\r\n}\r\n\r\nfunction* login() {\r\n  try {\r\n    yield call(loginAPI);\r\n    yield put({ // loginAPI 성공 put은 dispatch와 동일\r\n      type: LOG_IN_SUCCESS\r\n    });\r\n  } catch (e) { // loginAPI 실패\r\n    console.error(e);\r\n    yield put({\r\n      type: LOG_IN_FAILURE\r\n    });\r\n  }\r\n}\r\nfunction* watchSignUp() {\r\n}\r\n\r\nfunction* watchLogin() {\r\n  yield take(LOG_IN);\r\n  yield put({\r\n    type: LOG_IN_SUCCESS,\r\n  })\r\n}\r\n\r\n\r\nexport default function* userSaga() {\r\n  yield all([\r\n    watchLogin(),\r\n    watchSignUp(),\r\n  ]);\r\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;AAOA;;;AAIA;;;AAaA;;;AAGA;;;AAQA;AACA;AApsourceRoot":""}