{"version":3,"file":"static/webpack/static\\development\\pages\\_app.js.eba3cd89f36a5a110fb9.hot-update.js","sources":["webpack:///./sagas/user.js"],"sourcesContent":["import { all, fork, takeEvery, call, put } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport {\r\n  LOG_IN_REQUEST,\r\n  LOG_IN_SUCCESS,\r\n  LOG_IN_FAILURE,\r\n  SIGN_UP_REQUEST,\r\n  SIGN_UP_FAILURE,\r\n  SIGN_UP_SUCCESS\r\n} from '../reducers/user';\r\n\r\n// all  -> redux-saga에서 eventListener와 비슷하게 등록된 함수들을, 모두 묶어줄 때 사용한다.\r\n// take -> redux-saga에서 generator.next()와 마찬가지로 yield 로인해 중단된 함수를 Action이 들어왔을 때 다시 재개시킨다.\r\n// put  -> redux-saga에서의 dispatch라 생각하면 된다.\r\n// call -> fork와 비슷하며 함수를 실행해준다. 동기 호출을 할 때 사용한다. ex) 로그인 버튼을 클릭하여 서버로 요청을 보냈을 때 응답결과를 받고 아래 코드를 동기적으로 실행\r\n// fork -> call과 비슷하며 함수를 실행해준다. 비동기 호출을 할 때 사용한다. ex) 로그인 버튼을 클릭하여 서버로 요청을 보냈을 때 비동기로 바로 아래코드 실행\r\n// delay -> 딜레이를 준다. 몇초뒤 실행\r\n// takeEvery -> redux-saga에서 while(true)와같이 지속 리스닝을 위한 지원 effect\r\n// takeLatest -> takeEvery와 겉보기에는 별차이 없어보인다. 하지만 동시에 여러번의 작업이 들어왔을때 마지막 부분만 실행한다\r\n// 예를 들자면 ex) 로그인 버튼을 광클릭 하게 되었을때 여러번 요청 가는것을 방지하기위해 마지막것만 처리해준다. \r\n// takeEvery, takeLatest의 사용 구분은, 동시에 여러작업이 들어왔을대 모든것들을 처리해줄 것이냐, 마지막것만 처리해줄 것이냐로 구분하면 된다.\r\n\r\naxios.defaults.baseURL = 'http://localhost:9026/api'\r\n\r\n// ----------------------------------- login -------------------------------------\r\n\r\nfunction logInAPI(loginData) {\r\n  // 서버에 요청을 보내는 부분\r\n  return axios.post('/user/login', loginData, {\r\n    withCredentials: true,\r\n  });\r\n}\r\n\r\nfunction* logIn(action) {\r\n  try {\r\n    const result = yield call(logInAPI, action.data);\r\n    yield put({ // loginAPI 성공 put은 dispatch와 동일\r\n      type: LOG_IN_SUCCESS,\r\n      data: result.data\r\n    });\r\n  } catch (e) { // loginAPI 실패\r\n    console.error(e);\r\n    yield put({\r\n      type: LOG_IN_FAILURE\r\n    });\r\n  }\r\n}\r\nfunction* watchLogIn() {\r\n  yield takeEvery(LOG_IN_REQUEST, logIn);\r\n}\r\n\r\n// ----------------------------------- login -------------------------------------\r\n\r\n\r\n// ----------------------------------- signup ------------------------------------\r\n\r\nfunction signUpAPI(signUpData) {\r\n  // 서버에 요청을 보내는 부분\r\n  return axios.post('/user/', signUpData);\r\n}\r\n\r\nfunction* signUp(action) {\r\n  try {\r\n    yield call(signUpAPI, action.data);\r\n    yield put({ // put은 dispatch 동일\r\n      type: SIGN_UP_SUCCESS,\r\n    });\r\n  } catch (e) { // loginAPI 실패\r\n    console.error(e);\r\n    yield put({\r\n      type: SIGN_UP_FAILURE,\r\n      error: e\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchSignUp() {\r\n  yield takeEvery(SIGN_UP_REQUEST, signUp);\r\n}\r\n\r\n// ----------------------------------- signup ------------------------------------\r\n\r\n\r\n// ----------------------------------- logout ------------------------------------\r\n\r\nfunction logOutAPI() {\r\n  // 서버에 요청을 보내는 부분\r\n  return axios.post('/user/logout', {\r\n    withCredentials: true,\r\n  });\r\n}\r\n\r\nfunction* logOut(action) {\r\n  try {\r\n    yield call(logOutAPI);\r\n    yield put({ // put은 dispatch 동일\r\n      type: LOG_OUT_SUCCESS,\r\n    });\r\n  } catch (e) { // loginAPI 실패\r\n    console.error(e);\r\n    yield put({\r\n      type: LOG_OUT_FAILURE,\r\n      error: e\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLogout() {\r\n  yield takeEvery(LOG_OUT_REQUEST, logOut);\r\n}\r\n\r\n// ----------------------------------- logout ------------------------------------\r\n\r\n\r\n// ----------------------------------- loadUser -------------------------------------\r\n\r\nfunction loadUserAPI(loginData) {\r\n  // 서버에 요청을 보내는 부분\r\n  return axios.get('/user/login', loginData, {\r\n    withCredentials: true,\r\n  });\r\n}\r\n\r\nfunction* loadUser(action) {\r\n  try {\r\n    const result = yield call(loadUserAPI, action.data);\r\n    yield put({ // loginAPI 성공 put은 dispatch와 동일\r\n      type: LOG_IN_SUCCESS,\r\n      data: result.data\r\n    });\r\n  } catch (e) { // loginAPI 실패\r\n    console.error(e);\r\n    yield put({\r\n      type: LOG_IN_FAILURE\r\n    });\r\n  }\r\n}\r\nfunction* watchLoadUser() {\r\n  yield takeEvery(LOG_IN_REQUEST, logIn);\r\n}\r\n\r\n// ----------------------------------- loadUser -------------------------------------\r\n\r\n\r\nexport default function* userSaga() {\r\n  yield all([\r\n    fork(watchLogIn),\r\n    fork(watchLogout),\r\n    fork(watchLoadUser),\r\n    fork(watchSignUp)\r\n  ]);\r\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAiCA;;;AAcA;;;AAcA;;;AAeA;;;AAgBA;;;AAeA;;;AAgBA;;;AAcA;;;AAOA;AACA;AAjJA;AACA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAHA;AAEA;AAFA;AAGA;AAAA;AACA;AACA;AAFA;AACA;AAJA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAOA;AACA;AARA;AASA;AACA;AADA;AACA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAaA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAHA;AAAA;AAGA;AAAA;AACA;AADA;AACA;AAJA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAMA;AACA;AAPA;AAQA;AACA;AACA;AAFA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AAAA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAHA;AAAA;AAGA;AAAA;AACA;AADA;AACA;AAJA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAMA;AACA;AAPA;AAQA;AACA;AACA;AAFA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AAAA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAHA;AAEA;AAFA;AAGA;AAAA;AACA;AACA;AAFA;AACA;AAJA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAOA;AACA;AARA;AASA;AACA;AADA;AACA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAaA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}